type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String CORRECT_SERVER_OUTPUT =
            "Server started!\n" +
                "Received: Give me a record # N\n" +
                "Sent: A record # N was sent!";

        private static final String CORRECT_CLIENT_OUTPUT =
            "Client started!\n" +
                "Sent: Give me a record # N\n" +
                "Received: A record # N was sent!";

        @DynamicTest(order = 1)
        CheckResult test() {

            TestedProgram server = new TestedProgram("server");
            server.startInBackground();

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            String serverOutput = server.getOutput().trim();

            if (!serverOutput.trim().equals("Server started!")) {
                return CheckResult.wrong("Server output should be 'Server started!' until a client connects!");
            }

            TestedProgram client = new TestedProgram("client");

            String clientOutput = client.start();
            serverOutput += "\n" + server.getOutput();

            String[] serverOutputLines = serverOutput.split("\n");

            if (serverOutputLines.length != 3) {
                return CheckResult.wrong("After the client connects to the server, the server output should contain 3 lines!");
            }

            String serverOutputLastLine = serverOutputLines[serverOutputLines.length - 1];

            if (!serverOutputLastLine.contains("Sent: A record #") || !serverOutputLastLine.contains("was sent!")) {
                return CheckResult.wrong("Server output after client connects to the server should be:\n"
                    + CORRECT_SERVER_OUTPUT + "\n\nWhere N is some number.\n\nYour output:\n" + serverOutput);
            }

            String[] clientOutputLines = clientOutput.split("\n");

            if (clientOutputLines.length != 3) {
                return CheckResult.wrong("After the client connects to the server, the client output should contain 3 lines!");
            }

            String clientOutputLastLine = clientOutputLines[clientOutputLines.length - 1];

            if (!clientOutputLastLine.contains("Received: A record #") || !clientOutputLastLine.contains("was sent!")) {
                return CheckResult.wrong("Client output after client connects to the server should be:\n"
                    + CORRECT_CLIENT_OUTPUT + "\n\nWhere N is some number.\n\nYour output:\n" + clientOutput);
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/server/CLI.java
  visible: true
  text: |
    package server;

    import java.util.Scanner;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class CLI {
        private CLI() {
        }

        private static final Scanner scanner = new Scanner(System.in);
        private static final String ERROR = "ERROR";
        private static final String SET_REGEX = "set\\s+\\d+";
        private static final Pattern SET_PATTERN = Pattern.compile(SET_REGEX, Pattern.CASE_INSENSITIVE);

        public static void start() {
            while (true) {
                runCommand();
            }
        }

        private static void runCommand() {
            var input = scanner.nextLine().trim();
            var tokens = ArgumentTokenizer.tokenize(input);

            if (tokens.size() == 1) {
                if (tokens.get(0).equals("exit")) {
                    System.exit(0);
                } else {
                    System.out.println(ERROR);
                }
            } else if (tokens.size() > 1) {

                try {
                    Integer.parseInt(tokens.get(1));
                } catch (NumberFormatException e) {
                    System.out.println(ERROR);
                    return;
                }

                int index = Integer.parseInt(tokens.get(1)) - 1;

                if (tokens.size() > 2 && tokens.get(0).equals("set")) {
                    set(index, input);
                    return;
                }

                switch (tokens.get(0)) {
                    case "get" -> get(index);
                    case "delete" -> delete(index);
                    default -> System.out.println(ERROR);
                }
            }
        }

        private static void get(int index) {
            String cell = Data.getCellData(index);
            if (cell == null) {
                System.out.println(ERROR);
                return;
            }
            System.out.println(cell);
        }

        private static void set(int index, String value) {
            Matcher matcher = SET_PATTERN.matcher(value);

            int beginIndex = -1;
            if (matcher.find()) {
                beginIndex = matcher.end() + 1;
            }
            String text = value.substring(beginIndex);
            if (Data.setCell(index, text)) {
                System.out.println("OK");
            } else {
                System.out.println(ERROR);
            }
        }

        private static void delete(int index) {
            if (Data.deleteCell(index)) {
                System.out.println("OK");
            } else {
                System.out.println(ERROR);
            }
        }
    }
  learner_created: true
- name: src/server/ArgumentTokenizer.java
  visible: true
  text: |-
    package server;

    import java.util.LinkedList;
    import java.util.List;

    abstract class ArgumentTokenizer {
        private static final int NO_TOKEN_STATE = 0;
        private static final int NORMAL_TOKEN_STATE = 1;
        private static final int SINGLE_QUOTE_STATE = 2;
        private static final int DOUBLE_QUOTE_STATE = 3;

        private ArgumentTokenizer() {
        }

        /**
         * Tokenizes the given String into String tokens
         *
         * @param arguments A String containing one or more command-line style arguments to be tokenized.
         * @return A list of parsed and properly escaped arguments.
         */
        public static List<String> tokenize(String arguments) {
            return tokenize(arguments, false);
        }

        /**
         * Tokenizes the given String into String tokens.
         *
         * @param arguments A String containing one or more command-line style arguments to be tokenized.
         * @param stringify whether to include escape special characters
         * @return A list of parsed and properly escaped arguments.
         */
        public static List<String> tokenize(String arguments, boolean stringify) {

            LinkedList<String> argList = new LinkedList<>();
            StringBuilder currArg = new StringBuilder();
            boolean escaped = false;
            int state = NO_TOKEN_STATE;  // start in the NO_TOKEN_STATE
            int len = arguments.length();

            // Loop over each character in the string
            for (int i = 0; i < len; i++) {
                char c = arguments.charAt(i);
                if (escaped) {
                    // Escaped state: just append the next character to the current arg.
                    escaped = false;
                    currArg.append(c);
                } else {
                    switch (state) {
                        case SINGLE_QUOTE_STATE:
                            if (c == '\'') {
                                // Seen the close quote; continue this arg until whitespace is seen
                                state = NORMAL_TOKEN_STATE;
                            } else {
                                currArg.append(c);
                            }
                            break;
                        case DOUBLE_QUOTE_STATE:
                            if (c == '"') {
                                // Seen the close quote; continue this arg until whitespace is seen
                                state = NORMAL_TOKEN_STATE;
                            } else if (c == '\\') {
                                // Look ahead, and only escape quotes or backslashes
                                i++;
                                char next = arguments.charAt(i);
                                if (next == '"' || next == '\\') {
                                    currArg.append(next);
                                } else {
                                    currArg.append(c);
                                    currArg.append(next);
                                }
                            } else {
                                currArg.append(c);
                            }
                            break;

                        case NO_TOKEN_STATE:
                        case NORMAL_TOKEN_STATE:
                            switch (c) {
                                case '\\':
                                    escaped = true;
                                    state = NORMAL_TOKEN_STATE;
                                    break;
                                case '\'':
                                    state = SINGLE_QUOTE_STATE;
                                    break;
                                case '"':
                                    state = DOUBLE_QUOTE_STATE;
                                    break;
                                default:
                                    if (!Character.isWhitespace(c)) {
                                        currArg.append(c);
                                        state = NORMAL_TOKEN_STATE;
                                    } else if (state == NORMAL_TOKEN_STATE) {
                                        // Whitespace ends the token; start a new one
                                        argList.add(currArg.toString());
                                        currArg = new StringBuilder();
                                        state = NO_TOKEN_STATE;
                                    }
                            }
                            break;
                        default:
                            throw new IllegalStateException("ArgumentTokenizer state " + state + " is invalid!");
                    }
                }
            }

            // If we're still escaped, put in the backslash
            if (escaped) {
                currArg.append('\\');
                argList.add(currArg.toString());
            }
            // Close the last argument if we haven't yet
            else if (state != NO_TOKEN_STATE) {
                argList.add(currArg.toString());
            }
            // Format each argument if we've been told to stringify them
            if (stringify) {
                for (int i = 0; i < argList.size(); i++) {
                    argList.set(i, "\"" + escapeQuotesAndBackslashes(argList.get(i)) + "\"");
                }
            }
            return argList;
        }

        /**
         * Inserts backslashes before any occurrences of a backslash or
         * quote in the given string.  Also converts any special characters
         * appropriately.
         */
        protected static String escapeQuotesAndBackslashes(String s) {
            final StringBuilder buf = new StringBuilder(s);

            // Walk backwards, looking for quotes or backslashes.
            //  If we see any, insert an extra backslash into the buffer at
            //  the same index.  (By walking backwards, the index into the buffer
            //  will remain correct as we change the buffer.)
            for (int i = s.length() - 1; i >= 0; i--) {
                char c = s.charAt(i);
                if ((c == '\\') || (c == '"')) {
                    buf.insert(i, '\\');
                }
                // Replace any special characters with escaped versions
                else if (c == '\n') {
                    buf.deleteCharAt(i);
                    buf.insert(i, "\\n");
                } else if (c == '\t') {
                    buf.deleteCharAt(i);
                    buf.insert(i, "\\t");
                } else if (c == '\r') {
                    buf.deleteCharAt(i);
                    buf.insert(i, "\\r");
                } else if (c == '\b') {
                    buf.deleteCharAt(i);
                    buf.insert(i, "\\b");
                } else if (c == '\f') {
                    buf.deleteCharAt(i);
                    buf.insert(i, "\\f");
                }
            }
            return buf.toString();
        }
    }
  learner_created: true
- name: src/server/Data.java
  visible: true
  text: |
    package server;

    public class Data {
        private Data() {
        }

        private static final String[] DATABASE = new String[100];

        public static String getCellData(int index) {
            if (index >= DATABASE.length || index < 0) {
                return null;
            }
            return DATABASE[index];
        }

        public static boolean setCell(int index, String value) {
            if (index >= DATABASE.length || index < 0) {
                return false;
            }
            DATABASE[index] = value;
            return true;
        }

        public static boolean deleteCell(int index) {
            if (index >= DATABASE.length || index < 0) {
                return false;
            }
            DATABASE[index] = null;
            return true;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5491#comment
status: Unchecked
record: -1
