type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String OK_STATUS = "OK";
        private static final String ERROR_STATUS = "ERROR";

        private static final String WRONG_EXIT = "The server should stop when client sends 'exit' request";
        private static final String WRONG_GET_EMPTY_CELL_WITH_ERROR = "When a client tries to get an empty cell from " +
                "the server, the server should response with 'ERROR' and the client should print that response";
        private static final String WRONG_SET_VALUE_TO_CELL_WITH_OK = "When a client tries to save a value on" +
                " the server, the server should save the value and response with '" + OK_STATUS + "'. The client should " +
                "print that response";
        private static final String WRONG_GET_VALUE = "When a client tries to get a not empty cell from the server, " +
                "the server should response with a value of the cell. The client should pint received value.\n" +
                "May be the problem is in processing 'set' action:\nIf the specified cell already contains " +
                "information, you should simply rewrite it.";
        private static final String WRONG_DELETE = "When a client tries to delete a value from the cell on the server," +
                " the server should assign an empty string to this cell and response with '" + OK_STATUS + "'.";
        private static final String WRONG_DELETE_EMPTY = "When a client tries to delete a cell with an empty value from the server," +
                " the server should assign an empty string to this cell and response with '" + OK_STATUS + "'.";
        private static final String WRONG_DELETE_INDEX_OUT_OF_BOUNDS = "When a user tries to delete a cell which index " +
                "is less than 0 or greater than 1000, the server should response with  '" + ERROR_STATUS + "'.";

        @DynamicTest(order = 1)
        CheckResult checkExit() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client = getClient();
            client.start("-t", "exit");

            try {
                Thread.sleep(50);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!server.isFinished()) {
                server.stop();
                return CheckResult.wrong(WRONG_EXIT);
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 2)
        CheckResult testInputs() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client;
            String output;
            String expectedValue;

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR);
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "1", "-m", "Hello world!");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "1", "-m", "HelloWorld!");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            expectedValue = "HelloWorld!";
            if (!output.contains(expectedValue)) {
                return CheckResult.wrong(WRONG_GET_VALUE +
                        "\nExpected:\n" + expectedValue + "\nYour output:\n" + output);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR + "\nMay be after deleting a cell you didn't " +
                        "assign an empty value to it.");
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "55", "-m", "Some text here");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "55");
            expectedValue = "Some text here";
            if (!output.contains(expectedValue)) {
                return CheckResult.wrong(WRONG_GET_VALUE +
                        "\nExpected:\n" + expectedValue + "\nYour output:\n" + output);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "56");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "55");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "56");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "100");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1001");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_INDEX_OUT_OF_BOUNDS);
            }

            client = getClient();
            client.start("-t", "exit");

            return CheckResult.correct();
        }


        private static TestedProgram getClient() {
            return new TestedProgram("client");
        }

        private static TestedProgram getServer() {
            return new TestedProgram("server");
        }

        private static void stopServer() {
            TestedProgram client = getClient();
            client.start("-t", "exit");
        }
    }
  learner_created: false
- name: src/server/ServerStream.java
  visible: true
  text: |
    package server;

    import stream.ServerInfo;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.InetAddress;
    import java.net.ServerSocket;
    import java.net.Socket;

    public class ServerStream {
        private static ServerStream instance;
        private final DataInputStream input;
        private final DataOutputStream output;


        private ServerStream() throws IOException {
            ServerSocket serverSocket = new ServerSocket(Integer.parseInt(ServerInfo.get("port")),
                    50, InetAddress.getByName(ServerInfo.get("address")));
            System.out.println("Server started!");
            Socket socket = serverSocket.accept();
            input = new DataInputStream(socket.getInputStream());
            output = new DataOutputStream(socket.getOutputStream());
        }

        public static boolean readUTF() {
            initialize();
            try {
                String msg = instance.input.readUTF();
                System.out.println("Received: " + msg);
                response(msg);
                return false;
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
            return true;
        }

        public static void writeUTF(String msg) {
            initialize();
            try {
                instance.output.writeUTF(msg);
                System.out.println("Sent: " + msg);
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }

        public static void response(String msg) {
            try {
                var recordNum = msg.split("Give me a record # ")[1];
                writeUTF("A record # " + recordNum + " was sent!");
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }

        private static void initialize() {
            if (instance == null) {
                try {
                    instance = new ServerStream();
                } catch (IOException e) {
                    System.out.println("ERROR");
                }
            }
        }
    }
  learner_created: true
- name: src/stream/ServerInfo.java
  visible: true
  text: |
    package stream;

    public enum ServerInfo {
        ADDRESS("127.0.0.1"),
        PORT("8080");

        private final String value;

        ServerInfo(String value) {
            this.value = value;
        }

        public static String get(ServerInfo info) {
            return info.value;
        }

        public static String get(String info) {
            return ServerInfo.valueOf(info.toUpperCase()).value;
        }
    }
  learner_created: true
- name: src/client/ClientStream.java
  visible: true
  text: |
    package client;

    import stream.ServerInfo;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.InetAddress;
    import java.net.Socket;

    public class ClientStream extends Socket {
        private static ClientStream instance;
        private final DataInputStream input;
        private final DataOutputStream output;


        private ClientStream() throws IOException {
            super(InetAddress.getByName(ServerInfo.get("address")),
                    Integer.parseInt(ServerInfo.get("port")));
            System.out.println("Client started!");
            input = new DataInputStream(getInputStream());
            output = new DataOutputStream(getOutputStream());

        }

        public static void readUTF() {
            try {
                System.out.println("Received: " + instance.input.readUTF());
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }

        public static void writeUTF(String msg) {
            initialize();
            try {
                instance.output.writeUTF(msg);
                System.out.println("Sent: " + msg);
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }

        private static void initialize() {
            if (instance == null) {
                try {
                    instance = new ClientStream();
                } catch (IOException e) {
                    System.out.println("ERROR");
                }
            }
        }
    }
  learner_created: true
- name: src/client/cli/CommandArgsValidator.java
  visible: true
  learner_created: true
- name: src/server/commander/Controller.java
  visible: true
  learner_created: true
- name: src/server/commander/Command.java
  visible: true
  learner_created: true
- name: src/server/commander/SetCommand.java
  visible: true
  learner_created: true
- name: src/server/commander/GetCommand.java
  visible: true
  learner_created: true
- name: src/server/commander/DeleteCommand.java
  visible: true
  learner_created: true
- name: src/resources/server_conf.json
  visible: true
  learner_created: true
- name: src/server/data/ServerConfig.java
  visible: true
  learner_created: true
- name: src/server/commander/CommandData.java
  visible: true
  learner_created: true
- name: src/server/data/DataSet.java
  visible: true
  text: |
    package server;

    public class Data {
        private Data() {
        }

        private static final String[] DATABASE = new String[100];

        public static String getCellData(int index) {
            if (index >= DATABASE.length || index < 0) {
                return null;
            }
            return DATABASE[index];
        }

        public static boolean setCell(int index, String value) {
            if (index >= DATABASE.length || index < 0) {
                return false;
            }
            DATABASE[index] = value;
            return true;
        }

        public static boolean deleteCell(int index) {
            if (index >= DATABASE.length || index < 0) {
                return false;
            }
            DATABASE[index] = null;
            return true;
        }
    }
  learner_created: true
- name: src/client/cli/CommandArgs.java
  visible: true
  learner_created: true
- name: src/server/commander/CommandType.java
  visible: true
  learner_created: true
- name: src/server/commander/ExitCommand.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5492#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 08 Jul 2022 18:39:42 UTC
record: 3
